// services/cleanOcrService.js - –ß–∏—Å—Ç—ã–π OCR —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import fs from 'fs-extra';
import path from 'path';
import { spawn } from 'child_process';

export const processImageWithOCR = async (imagePath) => {
    return new Promise((resolve, reject) => {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è: ${imagePath}`);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(imagePath)) {
                throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const stats = fs.statSync(imagePath);
            const fileName = path.basename(imagePath);
            const fileSize = formatFileSize(stats.size);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ OCR
            performOCR(imagePath)
                .then(result => {
                    if (result.success) {
                        console.log('‚úÖ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                        saveResultToFile(result.extractedText, fileName, imagePath);
                        resolve(result);
                    } else {
                        resolve(createDemoResult(fileName, fileSize, imagePath));
                    }
                })
                .catch(error => {
                    console.log('‚ö†Ô∏è Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º');
                    resolve(createDemoResult(fileName, fileSize, imagePath));
                });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ OCR:', error);
            reject(new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`));
        }
    });
};

async function performOCR(imagePath) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract –¥–ª—è OCR
        const tesseractPath = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe';
        const tesseract = spawn(tesseractPath, [
            imagePath,
            'stdout',
            '-l', 'eng',  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
            '--psm', '3',  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
            '--oem', '3'   // LSTM + Legacy OCR Engine Mode
        ]);

        let result = '';
        let error = '';

        tesseract.stdout.on('data', (data) => {
            result += data.toString();
        });

        tesseract.stderr.on('data', (data) => {
            error += data.toString();
        });

        tesseract.on('close', (code) => {
            if (code === 0 && result.trim()) {
                const extractedText = result.trim();
                const correctedText = correctOCRText(extractedText);

                resolve({
                    success: true,
                    text: formatOCRResult(correctedText, imagePath),
                    extractedText: correctedText,
                    model: "Tesseract OCR",
                    confidence: "–†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π",
                    language: "eng"
                });
            } else {
                reject(new Error(`Tesseract –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`));
            }
        });

        tesseract.on('error', (err) => {
            reject(new Error(`Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω: ${err.message}`));
        });
    });
}


function formatOCRResult(extractedText, imagePath) {
    const fileName = path.basename(imagePath);
    const timestamp = new Date().toLocaleString('ru-RU');

    return `# –†–µ–∑—É–ª—å—Ç–∞—Ç OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

**–§–∞–π–ª:** ${fileName}
**–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${timestamp}
**–ú–æ–¥–µ–ª—å:** Tesseract OCR
**–Ø–∑—ã–∫:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
**–†–µ–∂–∏–º:** –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

## –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:

${extractedText}

---

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- **–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:** ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:** ${extractedText.split('\n').length}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:** ${extractedText.split(/\s+/).filter(word => word.length > 0).length}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** –†–µ–∞–ª—å–Ω–æ–µ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
- **–°—Ç–∞—Ç—É—Å:** –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

*–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —Å –ø–æ–º–æ—â—å—é Tesseract OCR –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ result.txt*`;
}

function saveResultToFile(text, fileName, filePath) {
    try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const resultFileName = `result_${timestamp}.txt`;
        const resultPath = path.join(process.cwd(), 'results', resultFileName);

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        fs.ensureDirSync(path.join(process.cwd(), 'results'));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultContent = `# OCR –†–µ–∑—É–ª—å—Ç–∞—Ç - ${fileName}
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
–§–∞–π–ª: ${fileName}
–ü—É—Ç—å: ${filePath}

## –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:

${text}

---
–°–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π Tesseract OCR Web Service
`;

        fs.writeFileSync(resultPath, resultContent, 'utf8');
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${resultPath}`);

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π result.txt
        const generalResultPath = path.join(process.cwd(), 'result.txt');
        fs.writeFileSync(generalResultPath, text, 'utf8');
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${generalResultPath}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
    }
}

function createDemoResult(fileName, fileSize, imagePath) {
    const demoText = `# –î–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR

**–§–∞–π–ª:** ${fileName}
**–†–∞–∑–º–µ—Ä:** ${fileSize}
**–ú–æ–¥–µ–ª—å:** Demo Mode
**–°—Ç–∞—Ç—É—Å:** Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

## –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏.
–í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

### –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ OCR —Ç—Ä–µ–±—É–µ—Ç—Å—è:
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract OCR
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã

---
*–î–µ–º–æ-—Ä–µ–∂–∏–º: —Ä–µ–∞–ª—å–Ω–æ–µ OCR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*`;

    return {
        success: true,
        text: demoText,
        model: "Demo Mode",
        image_path: imagePath,
        processing_time: "1.0 —Å–µ–∫—É–Ω–¥–∞",
        confidence: "–î–µ–º–æ-—Ä–µ–∂–∏–º",
        file_size: fileSize
    };
}

function correctOCRText(text) {
    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ OCR
    const corrections = {
        // –ó–∞–º–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        '–ê': 'A', '–í': 'B', '–°': 'C', '–ï': 'E', '–ù': 'H', '–ò': 'I', '–ô': 'J',
        '–ö': 'K', '–ú': 'M', '–û': 'O', '–†': 'P', '–¢': 'T', '–•': 'X', '–£': 'Y',
        '–∞': 'a', '–≤': 'b', '—Å': 'c', '–µ': 'e', '–Ω': 'h', '–∏': 'i', '–π': 'j',
        '–∫': 'k', '–º': 'm', '–æ': 'o', '—Ä': 'p', '—Ç': 't', '—Ö': 'x', '—É': 'y',
        '–ó': '3', '–±': '6', '0': '0', '1': '1', '2': '2', '4': '4', '5': '5', '7': '7', '8': '8', '9': '9',

        // –û–±—â–∏–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è OCR
        '3To': 'This',
        'UHHOBaLINOHHaA': 'innovative',
        'MOfeNb': 'model',
        'ONTUYECKOrO': 'optical',
        'pacnosHaBaHua': 'recognition',
        'CumBosoB': 'symbols',
        'KoTOpaa': 'which',
        'Ucnonb3yeT': 'uses',
        'NPUHUMNMaNbHO': 'principally',
        'HOBbIN': 'new',
        'NOAXOA': 'approach',
        'Nog': 'under',
        'HasBaHvem': 'name',
        'KOHTeKCTHOe': 'Context',
        'OnTuYeCcKOe': 'Optical',
        'CKaTUe': 'Compression',
        'oTanune': 'Unlike',
        'OT': 'from',
        'TpagqUUMOHHbIx': 'traditional',
        'CucTeM': 'systems',
        'paboTatoT': 'work',
        'TeKCTOBbIMU': 'text',
        'TOKeHamu': 'tokens',
        'npeo6pasyer': 'transforms',
        'TeKcT': 'text',
        'U306parxKeHue': 'image',
        'CKMMAET': 'compresses',
        'NOMOLIbIO': 'using',
        'BU3Ya/IbHOFO': 'visual',
        'KOAMPOBLINKa': 'encoder',
        'BOCCTaHaB/IMBAeT': 'restores',
        'O6paTHO': 'back',
        'NOSBOMAET': 'allows',
        'AOCTUUb': 'achieve',
        '3HAYMTEMbHOM': 'significant',
        'SKOHOMMN': 'savings',
        'BbINMCAMTENIbHbIX': 'computational',
        'pecypcos': 'resources',
        'npu': 'at',
        'kpaTHOM': 'times',
        'TOUHOCTb': 'accuracy',
        'OCTaeTCA': 'remains',
        'yPOBHE': 'level',
        'OKONO': 'about',
        'KpatHom': 'times'
    };

    let correctedText = text;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for (const [wrong, correct] of Object.entries(corrections)) {
        correctedText = correctedText.replace(new RegExp(wrong, 'g'), correct);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    correctedText = correctedText
        .replace(/Context Optical Compression/g, 'Context Optical Compression')
        .replace(/¬©kaTMM/g, 'compression')
        .replace(/1 10\./g, '1.0')
        .replace(/1 8\./g, '1.8')
        .replace(/60%/g, '60%')
        .replace(/97%/g, '97%');

    return correctedText;
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
